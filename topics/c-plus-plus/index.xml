<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C Plus Plus on See the Word Abstractly</title>
    <link>https://constroy.github.io/topics/c-plus-plus/</link>
    <description>Recent content in C Plus Plus on See the Word Abstractly</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Mon, 12 Sep 2016 00:27:48 +0800</lastBuildDate>
    <atom:link href="https://constroy.github.io/topics/c-plus-plus/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>C&#43;&#43;高层抽象之构造函数</title>
      <link>https://constroy.github.io/post/C&#43;&#43;%E9%AB%98%E5%B1%82%E6%8A%BD%E8%B1%A1%E4%B9%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 12 Sep 2016 00:27:48 +0800</pubDate>
      
      <guid>https://constroy.github.io/post/C&#43;&#43;%E9%AB%98%E5%B1%82%E6%8A%BD%E8%B1%A1%E4%B9%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</guid>
      <description>

&lt;h3 id=&#34;特殊函数&#34;&gt;特殊函数&lt;/h3&gt;

&lt;p&gt;C++的类中有几类特殊函数，这些函数可以由编译器提供默认实现。它们是：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://en.cppreference.com/w/cpp/language/default_constructor&#34;&gt;Default constructor&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://en.cppreference.com/w/cpp/language/copy_constructor&#34;&gt;Copy constructor&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://en.cppreference.com/w/cpp/language/move_constructor&#34;&gt;Move constructor&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://en.cppreference.com/w/cpp/language/copy_assignment&#34;&gt;Copy assignment operator&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://en.cppreference.com/w/cpp/language/move_assignment&#34;&gt;Move assignment operator&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://en.cppreference.com/w/cpp/language/destructor&#34;&gt;Destructor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这些函数是隐式声明的的 &lt;code&gt;public&lt;/code&gt; 函数，当有ODR-use的时候，编译器会为它们生成定义。
当我们定义了自己的构造函数，赋值运算符或析构函数之后，默认函数就被禁用了。
如果我们想使用默认的函数，可以使用 &lt;code&gt;= defualt&lt;/code&gt; 来定义它，也可以用 &lt;code&gt;= delete&lt;/code&gt; 来删除它们。
这时编译器将认为它们是 &lt;code&gt;user-declared&lt;/code&gt; 。&lt;/p&gt;

&lt;h3 id=&#34;特殊构造函数&#34;&gt;特殊构造函数&lt;/h3&gt;

&lt;p&gt;除了一般的不带参的构造函数外，还有拷贝构造函数和移动构造函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class T {
public:
	T() = default;
	T(T &amp;amp;) = default;
	T(const T &amp;amp;) = default;
	T(T &amp;amp;&amp;amp;) = default;
	T &amp;amp;operator =(T &amp;amp;) = default;
	T &amp;amp;operator =(const T&amp;amp;) = default;
	T &amp;amp;operator =(T &amp;amp;&amp;amp;) = default;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意默认的拷贝函数有两种，调用的时候会根据参数类型选择重载。而默认的移动构造函数则只有一种。
&lt;code&gt;T(const T &amp;amp;&amp;amp;);&lt;/code&gt; 是没有默认实现的，这是因为通常移动构造的语义是会修改实参。
赋值运算符也一样，默认的移动赋值运算符是没有 &lt;code&gt;const&lt;/code&gt; 版本的。&lt;/p&gt;

&lt;h3 id=&#34;单例模式&#34;&gt;单例模式&lt;/h3&gt;

&lt;p&gt;有时候我们需要禁用拷贝构造和移动构造，比如当某个类需要用到单例模式的时候。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class T {
public:
	static T &amp;amp;get() {
		static T t;
		return t;
	}
	T(T &amp;amp;) = delete;
	T(T &amp;amp;&amp;amp;) = delete;
private:
	T() = default;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，由于用户定义了拷贝构造函数，默认赋值运算符已经被删除了。&lt;/p&gt;

&lt;h3 id=&#34;编译器优化&#34;&gt;编译器优化&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;class T {
public:
    T() = default;
    T(T &amp;amp;) {puts(&amp;quot;non-const&amp;quot;);}
    T(const T &amp;amp;) {puts(&amp;quot;const&amp;quot;);}
};

int main() {
    const T c;
    T a;
    T x(c);
    T y((const T)a);
    T z((const T &amp;amp;)a);
    return 0;
}

/*
 * output:
 * const
 * non-const
 * const
 */

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为什么第2个拷贝构造没有调用带const修饰的拷贝构造函数呢？&lt;/p&gt;

&lt;p&gt;原来，输出non-const的调用并不是代码中显式的拷贝构造，而是一次类型转换。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(const T)a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种类型转换实际上是通过拷贝构造函数实现的。
而后面那次显示的拷贝构造被编译器优化elide掉了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C&#43;&#43;高层抽象之虚函数</title>
      <link>https://constroy.github.io/post/C&#43;&#43;%E9%AB%98%E5%B1%82%E6%8A%BD%E8%B1%A1%E4%B9%8B%E8%99%9A%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 22 Mar 2016 19:37:43 +0800</pubDate>
      
      <guid>https://constroy.github.io/post/C&#43;&#43;%E9%AB%98%E5%B1%82%E6%8A%BD%E8%B1%A1%E4%B9%8B%E8%99%9A%E5%87%BD%E6%95%B0/</guid>
      <description>

&lt;p&gt;C++中的多态（Polymorphism）有两种，编译时多态和运行时多态。编译时多态包括函数重载（overload）和模板（template）等，而运行时多态主要是虚函数的重写（override）。&lt;/p&gt;

&lt;p&gt;首先区分几个概念：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://en.cppreference.com/w/cpp/language/overload_resolution&#34;&gt;重载（overload）&lt;/a&gt;： 相同作用范围（或命名空间）的同名函数的不同实现，只能通过参数列表来区分。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://en.cppreference.com/w/cpp/language/overload_resolution&#34;&gt;重写（override）&lt;/a&gt;： 在子类中重新实现父类中定义的虚函数，以支持动态绑定（dynamic binding）。&lt;/p&gt;

&lt;p&gt;覆盖（overwrite）：在子类中定义中与父类中函数同名的函数，若不构成重写，则父类中的同名函数被隐藏。类似于命名空间的覆盖。&lt;/p&gt;

&lt;h3 id=&#34;虚函数的声明&#34;&gt;虚函数的声明&lt;/h3&gt;

&lt;p&gt;在成员函数的声明前加上 &lt;code&gt;virtual&lt;/code&gt; 关键字就成了虚函数。在类外部的函数实现前不要加上 &lt;code&gt;virtual&lt;/code&gt;。静态成员函数（static）不能被声明为虚函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;virtual function_declaration ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦类A的某个函数被声明为虚函数，所有类A的派生类都将包含这个虚函数，且可以对其进行重写。重写时，可以省去 &lt;code&gt;virtual&lt;/code&gt; 关键字（笔者通常会明确写出 &lt;code&gt;virtual&lt;/code&gt; ）。&lt;/p&gt;

&lt;p&gt;一个特殊情况是构造函数，构造函数不能是虚函数。同时也不能在构造函数中调用虚函数，因为对象构造好之前它的调用表是不完整的，此时调用的函数是不确定的。&lt;/p&gt;

&lt;p&gt;c++11引入了两个新关键字 &lt;code&gt;override&lt;/code&gt; 和 &lt;code&gt;final&lt;/code&gt; 。
&lt;code&gt;override&lt;/code&gt; 明确声明一个函数是重写的，如果这个函数不能被重写，编译器将会报错。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;virtual void scan() override;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;final&lt;/code&gt; 明确声明一个函数是不可被重写的，如果在派生类中对其进行重写，编译器将会报错。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;virtual void scan() final;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;override&lt;/code&gt; 和 &lt;code&gt;final&lt;/code&gt; 可以一起使用，没有先后顺序。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;virtual void scan() override final;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;虚函数的使用&#34;&gt;虚函数的使用&lt;/h3&gt;

&lt;p&gt;虚函数最通常都是用来实现运行时多态，比如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class A {
public:
	virtual void fun();
};
class B: public A {
public:
	virtual void fun() override;
};
int main() {
	A *p=new B;
	A-&amp;gt;fun();
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时调用的是实际类B的fun()函数，而不是定义类A的fun()函数。&lt;/p&gt;

&lt;h3 id=&#34;纯虚函数&#34;&gt;纯虚函数&lt;/h3&gt;

&lt;p&gt;纯虚函数（pure virtual）是一种虚函数，它使得类变成抽象类（abstract class），抽象类不能被实例化。通过重载可以使纯虚函数变为普通虚函数，类变成普通类。也可以将纯虚函数继续重载为纯虚函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;	virtual void fun()=0;
	virtual void fun() override;
	virtual void fun() override=0;
	virtual void fun() final;
	virtual void fun() final=0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;注意第5种声明方式，它将fun()声明为一个纯虚函数，且不能被重载。这个类将永远不能被实例化。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;纯虚函数声明时不能进行函数体定义，只能将定义放在类外，这是由“初始化式的”语法所限制的。某些编译器扩展支持直接定义。
纯虚函数可以没有函数体定义，它的功能将由子类重写的函数实现。如果调用没有函数体定义的纯虚函数，将会发生链接错误。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class A {
public:
	int a;
	virtual void fun()=0;
};
class B: public A {
public:
	virtual void fun() override {}
};
/*
void A::fun() {
	printf(&amp;quot;A::fun&amp;quot;);
}
*/
int main()
{
	A *p=new B;
	p-&amp;gt;A::fun();
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;A.cpp:(.text+0x2a): undefined reference to `A::fun()&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;虚析构函数与纯虚析构函数&#34;&gt;虚析构函数与纯虚析构函数&lt;/h3&gt;

&lt;p&gt;如果类A的析构函数是虚函数，则所有类A的派生类的析构函数(包括默认析构函数)都是虚函数，且可以被重写，下面的代码将调用类B的析构函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class A {
public:
	virtual ～A();
};
class B: public A {
public:
	virtual ~B() override;
};
int main() {
	A *p=new B;
	delete p;
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;纯虚析构函数比较特殊，纯虚析构函数通常不能省略函数体定义，因为子类的析构函数会隐式调用父类的析构函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class A {
public:
	int a;
	virtual ~A()=0;
};
class B: public A {};
int main()
{
	A *p=new B;
	delete p;
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;A.cpp:(.text._ZN1BD2Ev[_ZN1BD5Ev]+0x20): undefined reference to `A::~A()&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>